# -*- coding: utf-8 -*-
"""Todolis＿APItest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OoxqbfQLUkBiWM-NHzr6MppdkuM-Ezp5
"""

!pip install -q fastapi nest-asyncio uvicorn pyngrok

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import nest_asyncio
from pyngrok import ngrok
import uvicorn
import pandas as pd

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=['*'],
    allow_credentials=True,
    allow_methods=['*'],
    allow_headers=['*'],
)
@app.get('/')
async def root():
    return {'hello': 'world!!!'}

@app.get("/achievement_rate/{space_id}")
async def get_achievement_rate_by_space(space_id: str):
    # Load the data
    try:
        df = pd.read_csv("goals.csv")

        # Filter data for the specific space_id
        space_df = df[df['space_id'] == space_id]

        if space_df.empty:
            return {"error": f"No data found for space_id: {space_id}"}

        # Separate tasks by status
        done_tasks = space_df[space_df['status'] == 'done']
        todo_tasks = space_df[space_df['status'] == 'todo']

        done_count = done_tasks.shape[0]
        todo_count = todo_tasks.shape[0]
        total_count = done_count + todo_count

        # Calculate achievement rate for the specific space_id
        if total_count > 0:
            achievement_rate = (done_count / total_count) * 100
        else:
            achievement_rate = 0.0

        # Prepare details for done and todo tasks
        done_details = done_tasks[['detail', 'assignee', 'due_on']].to_dict(orient='records')
        todo_details = todo_tasks[['detail', 'assignee', 'due_on']].to_dict(orient='records')


        return {
            "space_id": space_id,
            "total_count": total_count,
            "done_count": done_count,
            "todo_count": todo_count,
            "achievement_rate": round(achievement_rate, 2),
            "done_tasks": done_details,
            "todo_tasks": todo_details
        }

    except FileNotFoundError:
        return {"error": "goals.csv not found."}
    except KeyError:
        return {"error": "'status', 'space_id', 'detail', 'assignee', or 'due_on' column not found in the CSV."}
    except Exception as e:
        return {"error": f"An error occurred: {e}"}


ngrok.set_auth_token("31OXZcuWHj7D9ncBr9JxNWRGhed_43mnXf3EhKXZ96HC6nQNM")

ngrok_tunnel=ngrok.connect(8000)
print('PUBLIC_URL:',ngrok_tunnel.public_url)
nest_asyncio.apply()
uvicorn.run(app,port=8000)

"""【ここより下はテスト】"""

# データ読み込み
try:
    df = pd.read_csv("goals.csv")

    # Calculate todo and done counts
    done_count = df[df['status'].str.contains('todo')].shape[0]
    total_count = df.shape[0]
    todo_count = total_count - done_count

    # Calculate achievement rate
    if total_count > 0:
        achievement_rate = (done_count / total_count) * 100
    else:
        achievement_rate = 0.0

    print(f"やること(リスト)の合計: {total_count}")
    print(f"完了したやること(リスト): {done_count}")
    print(f"未完了のやること(リスト): {todo_count}")
    print(f"達成率: {achievement_rate:.2f}%")

except FileNotFoundError:
    print("Error: goals.csv not found.")
except KeyError:
    print("Error: 'やること(リスト)' column not found in the CSV.")
except Exception as e:
    print(f"An error occurred: {e}")